(undo-tree-save-format-version . 1)
"8b457edb6344d481b724910b8c432cbd9ba9cbf3"
[nil nil nil nil (26043 46890 48619 417000) 0 nil]
([nil nil ((1 . 5) (t 26043 46711 337944 122000)) nil (26043 46890 48616 554000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4) (undo-tree-id9 . -1) 5) nil (26043 46890 48615 157000) 0 nil])
([nil nil ((5 . 7) (4 . 6)) nil (26043 46890 48612 852000) 0 nil])
([nil nil ((7 . 8)) nil (26043 46890 48611 386000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7) (undo-tree-id8 . -1) 8) nil (26043 46890 48609 919000) 0 nil])
([nil nil ((7 . 11)) nil (26043 46890 48607 544000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-keyword-face fontified nil)) . -9) (undo-tree-id7 . -1) (#("]" 0 1 (face font-lock-keyword-face fontified t)) . 10)) nil (26043 46890 48605 659000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -8) (undo-tree-id6 . -1) 9) nil (26043 46890 48603 773000) 0 nil])
([nil nil ((8 . 10)) nil (26043 46890 48601 398000) 0 nil])
([nil nil ((10 . 13)) nil (26043 46890 48599 513000) 0 nil])
([nil nil ((14 . 15)) nil (26043 46890 48598 46000) 0 nil])
([nil nil ((15 . 16)) nil (26043 46890 48596 579000) 0 nil])
([nil nil ((20 . 22) (16 . 21)) nil (26043 46890 48595 113000) 0 nil])
([nil nil ((24 . 25) (22 . 25)) nil (26043 46890 48593 646000) 0 nil])
([nil nil ((29 . 30) (28 . 30) (26 . 29)) nil (26043 46890 48592 249000) 0 nil])
([nil nil ((33 . 34)) nil (26043 46890 48590 294000) 0 nil])
([nil nil ((34 . 35)) nil (26043 46890 48588 897000) 0 nil])
([nil nil ((35 . 36)) nil (26043 46890 48587 430000) 0 nil])
([nil nil ((39 . 41) (36 . 40)) nil (26043 46890 48585 545000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-keyword-face fontified t)) . -38) (undo-tree-id2 . -1) (#("[" 0 1 (face font-lock-keyword-face fontified t)) . -39) (undo-tree-id3 . -1) (#("]" 0 1 (face font-lock-keyword-face fontified t)) . -40) (undo-tree-id4 . -1) (#("]" 0 1 (face font-lock-keyword-face fontified t)) . -41) (undo-tree-id5 . -1) 42) nil (26043 46890 48583 659000) 0 nil])
([nil nil ((39 . 41) (38 . 40)) nil (26043 46890 48580 446000) 0 nil])
([nil nil ((43 . 46) (41 . 44)) nil (26043 46890 48578 491000) 0 nil])
([nil nil ((50 . 51) (49 . 51) (47 . 50)) nil (26043 46890 48577 24000) 0 nil])
([nil nil ((52 . 54)) nil (26043 46890 48574 719000) 0 nil])
([nil nil ((56 . 58)) nil (26043 46890 48572 764000) 0 nil])
([nil nil ((64 . 66) (58 . 65)) nil (26043 46890 48570 878000) 0 nil])
([nil nil ((66 . 70)) nil (26043 46890 48569 481000) 0 nil])
([nil nil ((71 . 72)) nil (26043 46890 48567 526000) 0 nil])
([nil nil ((72 . 73)) nil (26043 46890 48565 570000) 0 nil])
([nil nil ((78 . 81) (77 . 79) (73 . 78)) nil (26043 46890 48563 684000) 0 nil])
([nil nil ((82 . 83)) nil (26043 46890 48561 729000) 0 nil])
([nil nil ((83 . 85)) nil (26043 46890 48560 262000) 0 nil])
([nil nil ((87 . 88) (85 . 88)) nil (26043 46890 48558 376000) 0 nil])
([nil nil ((#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -87) (undo-tree-id1 . -1) 88) nil (26043 46890 48556 2000) 0 nil])
([nil nil ((88 . 89) (87 . 89)) nil (26043 46890 48553 627000) 0 nil])
([nil nil ((90 . 91)) nil (26043 46890 48552 231000) 0 nil])
([nil nil ((91 . 92)) nil (26043 46890 48549 856000) 0 nil])
([nil nil ((102 . 104) (94 . 103)) nil (26043 46890 48548 459000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-keyword-face fontified nil)) . -102) (undo-tree-id0 . -1) (#("]" 0 1 (face font-lock-keyword-face fontified t)) . 103)) nil (26043 46890 48547 62000) 0 nil])
([nil nil ((102 . 104)) nil (26043 46890 48530 720000) 0 nil])
([nil nil ((104 . 106)) nil (26043 46890 48529 253000) 0 nil])
([nil nil ((106 . 108)) nil (26043 46890 48527 856000) 0 nil])
([nil nil ((109 . 110)) nil (26043 46890 48525 970000) 0 nil])
([nil nil ((110 . 111)) nil (26043 46890 48524 15000) 0 nil])
([nil nil ((111 . 114)) nil (26043 46890 48522 618000) 0 nil])
([nil nil ((116 . 119) (115 . 117) (114 . 116)) nil (26043 46890 48521 221000) 0 nil])
([nil nil ((122 . 124) (120 . 123)) nil (26043 46890 48519 335000) 0 nil])
([nil nil ((124 . 125)) nil (26043 46890 48517 869000) 0 nil])
([nil nil ((129 . 132) (128 . 130) (126 . 129)) nil (26043 46890 48516 53000) 0 nil])
([nil nil ((133 . 135)) nil (26043 46890 48513 748000) 0 nil])
([nil nil ((145 . 150) (137 . 146)) nil (26043 46890 48511 862000) 0 nil])
([nil nil ((151 . 152)) nil (26043 46890 48509 488000) 0 nil])
([nil nil ((152 . 153)) nil (26043 46890 48502 853000) 0 nil])
([nil nil ((153 . 155) (t 26043 46890 66112 597000)) nil (26043 47502 454505 983000) 0 nil])
([nil nil ((155 . 156)) nil (26043 47502 454504 586000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -154) (undo-tree-id17 . -1) (#("7" 0 1 (fontified t)) . -155) (undo-tree-id18 . -1) 156) nil (26043 47502 454502 701000) 0 nil])
([nil nil ((158 . 159) (154 . 159)) nil (26043 47502 454500 326000) 0 nil])
([nil nil ((159 . 161)) nil (26043 47502 454498 859000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -160) (undo-tree-id16 . -1) 161) nil (26043 47502 454497 393000) 0 nil])
([nil nil ((160 . 162)) nil (26043 47502 454495 437000) 0 nil])
([nil nil ((163 . 164)) nil (26043 47502 454494 40000) 0 nil])
([nil nil ((164 . 165)) nil (26043 47502 454492 574000) 0 nil])
([nil nil ((165 . 169)) nil (26043 47502 454491 107000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -168) (undo-tree-id15 . -1) 169) nil (26043 47502 454489 710000) 0 nil])
([nil nil ((168 . 170)) nil (26043 47502 454487 755000) 0 nil])
([nil nil ((169 . 170)) nil (26043 47502 454486 777000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -169) (undo-tree-id14 . -1) 170) nil (26043 47502 454484 961000) 0 nil])
([nil nil ((169 . 170)) nil (26043 47502 454483 5000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-variable-name-face fontified t)) . -169) (undo-tree-id13 . -1) 170) nil (26043 47502 454480 701000) 0 nil])
([nil nil ((171 . 172) (169 . 172)) nil (26043 47502 454478 815000) 0 nil])
([nil nil ((174 . 182)) nil (26043 47502 454477 348000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -181) (undo-tree-id12 . -1) 182) nil (26043 47502 454475 462000) 0 nil])
([nil nil ((181 . 182)) nil (26043 47502 454473 88000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -181) (undo-tree-id11 . -1) 182) nil (26043 47502 454471 691000) 0 nil])
([nil nil ((181 . 182)) nil (26043 47502 454469 316000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -181) (undo-tree-id10 . -1) 182) nil (26043 47502 454467 850000) 0 nil])
([nil nil ((181 . 183)) nil (26043 47502 454460 97000) 0 nil])
([nil nil ((182 . 183)) nil (26043 47502 454458 212000) 0 nil])
([nil nil ((184 . 185)) nil (26043 47502 454456 745000) 0 nil])
([nil nil ((185 . 186)) nil (26043 47502 454452 66000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -158) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("e" 0 1 (fontified t)) . -159) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("r" 0 1 (fontified t)) . -160) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("o" 0 1 (fontified t)) . -161) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) 162 (t 26043 47502 470379 223000)) nil (26043 47542 390880 796000) 0 nil])
([nil nil ((158 . 159)) nil (26043 47542 390786 719000) 0 nil])
([nil nil ((183 . 184) (t 26043 47542 408042 478000)) nil (26043 47708 470130 493000) 0 nil])
([nil nil ((188 . 189) (184 . 189)) nil (26043 47708 470128 607000) 0 nil])
([nil nil ((#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -188) (undo-tree-id148 . -1) 189) nil (26043 47708 470127 210000) 0 nil])
([nil nil ((190 . 191) (188 . 191)) nil (26043 47708 470125 743000) 0 nil])
([nil nil ((195 . 196) (192 . 196)) nil (26043 47708 470124 347000) 0 nil])
([nil nil ((197 . 198)) nil (26043 47708 470122 880000) 0 nil])
([nil nil ((198 . 199)) nil (26043 47708 470121 413000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -198) (undo-tree-id147 . -1) 199) nil (26043 47708 470119 528000) 0 nil])
([nil nil ((198 . 199)) nil (26043 47708 470117 642000) 0 nil])
([nil nil ((200 . 203)) nil (26043 47708 470116 245000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -200) (undo-tree-id144 . -1) (#(":" 0 1 (fontified t)) . -201) (undo-tree-id145 . -1) (#("-" 0 1 (fontified t)) . -202) (undo-tree-id146 . -1) 203) nil (26043 47708 470114 289000) 0 nil])
([nil nil ((#("Z" 0 1 (face font-lock-variable-name-face fontified t)) . -198) (undo-tree-id143 . -1) 199) nil (26043 47708 470111 915000) 0 nil])
([nil nil ((198 . 199)) nil (26043 47708 470110 99000) 0 nil])
([nil nil ((200 . 201) (199 . 201)) nil (26043 47708 470108 632000) 0 nil])
([nil nil ((203 . 207)) nil (26043 47708 470107 235000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -199) (undo-tree-id135 . -1) (#("Z" 0 1 (face font-lock-variable-name-face fontified t)) . -200) (undo-tree-id136 . -1) (#(")" 0 1 (fontified t)) . -201) (undo-tree-id137 . -1) (#(")" 0 1 (fontified t)) . -202) (undo-tree-id138 . -1) (#(" " 0 1 (fontified t)) . -203) (undo-tree-id139 . -1) (#(":" 0 1 (fontified t)) . -204) (undo-tree-id140 . -1) (#("-" 0 1 (fontified t)) . -205) (undo-tree-id141 . -1) (#(" " 0 1 (fontified t)) . -206) (undo-tree-id142 . -1) 207) nil (26043 47708 470104 861000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -188) (undo-tree-id124 . -1) (#("(" 0 1 (fontified t)) . -189) (undo-tree-id125 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -190) (undo-tree-id126 . -1) (#(")" 0 1 (fontified t)) . -191) (undo-tree-id127 . -1) (#("," 0 1 (fontified t)) . -192) (undo-tree-id128 . -1) (#("s" 0 1 (fontified t)) . -193) (undo-tree-id129 . -1) (#("(" 0 1 (fontified t)) . -194) (undo-tree-id130 . -1) (#("Y" 0 1 (face font-lock-variable-name-face fontified t)) . -195) (undo-tree-id131 . -1) (#(")" 0 1 (fontified t)) . -196) (undo-tree-id132 . -1) (#("," 0 1 (fontified t)) . -197) (undo-tree-id133 . -1) (#("s" 0 1 (fontified t)) . -198) (undo-tree-id134 . -1) 199) nil (26043 47708 470100 181000) 0 nil])
([nil nil ((190 . 191) (188 . 191)) nil (26043 47708 470095 13000) 0 nil])
([nil nil ((192 . 198)) nil (26043 47708 470093 616000) 0 nil])
([nil nil ((197 . 198)) nil (26043 47708 470092 638000) 0 nil])
([nil nil ((199 . 201) (#(")" 0 1 (fontified nil)) . -199) (199 . 200)) nil (26043 47708 470091 172000) 0 nil])
([nil nil ((201 . 202)) nil (26043 47708 470089 705000) 0 nil])
([nil nil ((202 . 207)) nil (26043 47708 470088 238000) 0 nil])
([nil nil ((208 . 209) (206 . 209)) nil (26043 47708 470086 772000) 0 nil])
([nil nil ((213 . 214) (210 . 214)) nil (26043 47708 470085 305000) 0 nil])
([nil nil ((215 . 216)) nil (26043 47708 470083 908000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -206) (undo-tree-id120 . -1) (#("(" 0 1 (fontified t)) . -207) (undo-tree-id121 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -208) (undo-tree-id122 . -1) (#(")" 0 1 (fontified t)) . -209) (undo-tree-id123 . -1) 210) nil (26043 47708 470082 23000) 0 nil])
([nil nil ((206 . 207)) nil (26043 47708 470078 670000) 0 nil])
([nil nil ((215 . 216) (213 . 216)) nil (26043 47708 470077 203000) 0 nil])
([nil nil ((218 . 221)) nil (26043 47708 470075 737000) 0 nil])
([nil nil ((221 . 227)) nil (26043 47708 470074 340000) 0 nil])
([nil nil ((226 . 229)) nil (26043 47708 470072 943000) 0 nil])
([nil nil ((#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -228) (undo-tree-id119 . -1) 229) nil (26043 47708 470071 476000) 0 nil])
([nil nil ((228 . 231)) nil (26043 47708 470063 26000) 0 nil])
([nil nil ((232 . 233)) nil (26043 47708 470061 140000) 0 nil])
([nil nil ((233 . 234)) nil (26043 47708 470056 740000) 0 nil])
([nil nil ((234 . 236) (t 26043 47708 486766 77000)) nil (26043 47880 656470 673000) 0 nil])
([nil nil ((241 . 246) (236 . 242)) nil (26043 47880 656469 207000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -244) (undo-tree-id151 . -1) (#(")" 0 1 (fontified t)) . 245)) nil (26043 47880 656467 321000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-variable-name-face fontified t)) . -243) (undo-tree-id150 . -1) 244) nil (26043 47880 656465 435000) 0 nil])
([nil nil ((245 . 246) (243 . 246)) nil (26043 47880 656462 991000) 0 nil])
([nil nil ((248 . 249)) nil (26043 47880 656461 524000) 0 nil])
([nil nil ((249 . 250)) nil (26043 47880 656460 546000) 0 nil])
([nil nil ((257 . 258) (255 . 258) (250 . 256)) nil (26043 47880 656459 149000) 0 nil])
([nil nil ((259 . 260)) nil (26043 47880 656457 264000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -259) (undo-tree-id149 . -1) 260) nil (26043 47880 656455 378000) 0 nil])
([nil nil ((259 . 261)) nil (26043 47880 656446 438000) 0 nil])
([nil nil ((262 . 264)) nil (26043 47880 656445 41000) 0 nil])
([nil nil ((264 . 266)) nil (26043 47880 656443 644000) 0 nil])
([nil nil ((271 . 274) (266 . 272)) nil (26043 47880 656442 248000) 0 nil])
([nil nil ((275 . 282)) nil (26043 47880 656440 362000) 0 nil])
([nil nil ((283 . 284) (281 . 284)) nil (26043 47880 656438 895000) 0 nil])
([nil nil ((285 . 289)) nil (26043 47880 656437 9000) 0 nil])
([nil nil ((290 . 291)) nil (26043 47880 656435 124000) 0 nil])
([nil nil ((291 . 292)) nil (26043 47880 656430 794000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -281) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("(" 0 1 (fontified t)) . -282) (undo-tree-id164 . -1) (undo-tree-id165 . -1) 283 (t 26043 47880 685608 427000)) nil (26043 48021 886138 480000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -282) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 283) nil (26043 48021 886133 591000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -267) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("i" 0 1 (fontified t)) . -268) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#("b" 0 1 (fontified t)) . -269) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("(" 0 1 (fontified t)) . -270) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -271) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("," 0 1 (fontified t)) . -272) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("M" 0 1 (face font-lock-variable-name-face fontified t)) . -273) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#(")" 0 1 (fontified t)) . -274) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (#("," 0 1 (fontified t)) . -275) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#(" " 0 1 (fontified t)) . -276) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("a" 0 1 (fontified t)) . -277) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("d" 0 1 (fontified t)) . -278) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("d" 0 1 (fontified t)) . -279) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("(" 0 1 (fontified t)) . -280) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -281) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("," 0 1 (fontified t)) . -282) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#("M" 0 1 (face font-lock-variable-name-face fontified t)) . -283) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("," 0 1 (fontified t)) . -284) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("L" 0 1 (face font-lock-variable-name-face fontified t)) . -285) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#(")" 0 1 (fontified t)) . -286) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("." 0 1 (fontified t)) . -287) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) 288 (t 26043 48021 907751 79000)) nil (26043 48139 319419 983000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -250) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("f" 0 1 (fontified t)) . -251) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("i" 0 1 (fontified t)) . -252) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("b" 0 1 (fontified t)) . -253) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("(" 0 1 (fontified t)) . -254) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#("s" 0 1 (fontified t)) . -255) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("(" 0 1 (fontified t)) . -256) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -257) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#(")" 0 1 (fontified t)) . -258) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("," 0 1 (fontified t)) . -259) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("L" 0 1 (face font-lock-variable-name-face fontified t)) . -260) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#(")" 0 1 (fontified t)) . -261) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#(" " 0 1 (fontified t)) . -262) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#(":" 0 1 (fontified t)) . -263) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("-" 0 1 (fontified t)) . -264) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#(" " 0 1 (fontified t)) . -265) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("u" 0 1 (fontified t)) . -266) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) 267) nil (26043 48139 319377 519000) 0 nil])
([nil nil ((257 . 258) (255 . 258) (250 . 256)) nil (26043 48139 319356 217000) 0 nil])
([nil nil ((262 . 263) (259 . 263)) nil (26043 48139 319354 331000) 0 nil])
([nil nil ((265 . 266)) nil (26043 48139 319352 934000) 0 nil])
([nil nil ((266 . 267)) nil (26043 48139 319352 27000) 0 nil])
([nil nil ((267 . 271)) nil (26043 48139 319350 560000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -268) (undo-tree-id170 . -1) (#("f" 0 1 (fontified t)) . -269) (undo-tree-id171 . -1) (#("i" 0 1 (fontified t)) . -270) (undo-tree-id172 . -1) 271) nil (26043 48139 319348 674000) 0 nil])
([nil nil ((268 . 273)) nil (26043 48139 319346 300000) 0 nil])
([nil nil ((276 . 277) (274 . 277) (272 . 275)) nil (26043 48139 319344 344000) 0 nil])
([nil nil ((279 . 281)) nil (26043 48139 319342 877000) 0 nil])
([nil nil ((282 . 290)) nil (26043 48139 319341 480000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -286) (undo-tree-id166 . -1) (#("f" 0 1 (fontified t)) . -287) (undo-tree-id167 . -1) (#("i" 0 1 (fontified t)) . -288) (undo-tree-id168 . -1) (#("b" 0 1 (fontified t)) . -289) (undo-tree-id169 . -1) 290) nil (26043 48139 319339 525000) 0 nil])
([nil nil ((286 . 291)) nil (26043 48139 319329 607000) 0 nil])
([nil nil ((292 . 293) (290 . 293)) nil (26043 48139 319328 210000) 0 nil])
([nil nil ((294 . 298)) nil (26043 48139 319326 395000) 0 nil])
([nil nil ((299 . 300)) nil (26043 48139 319321 715000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -246) (undo-tree-id348 . -1) (undo-tree-id349 . -1) 247 (t 26043 48139 337085 760000)) nil (26043 48228 595742 798000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -243) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("(" 0 1 (fontified t)) . -244) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) 245) nil (26043 48228 595738 397000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -283) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (#("d" 0 1 (fontified t)) . -284) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (#("d" 0 1 (fontified t)) . -285) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (#("(" 0 1 (fontified t)) . -286) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (#("s" 0 1 (fontified t)) . -287) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (#("(" 0 1 (fontified t)) . -288) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -289) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#(")" 0 1 (fontified t)) . -290) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("," 0 1 (fontified t)) . -291) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -292) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (#("," 0 1 (fontified t)) . -293) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("L" 0 1 (face font-lock-variable-name-face fontified t)) . -294) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (#(")" 0 1 (fontified t)) . -295) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("." 0 1 (fontified t)) . -296) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) 297 (t 26043 48228 611602 959000)) nil (26043 48277 267500 338000) 0 nil])
([nil nil ((290 . 291) (288 . 291) (283 . 289)) nil (26043 48277 267478 897000) 0 nil])
([nil nil ((292 . 293)) nil (26043 48277 267477 81000) 0 nil])
([nil nil ((293 . 294)) nil (26043 48277 267475 684000) 0 nil])
([nil nil ((301 . 303) (295 . 302)) nil (26043 48277 267473 798000) 0 nil])
([nil nil ((303 . 304)) nil (26043 48277 267471 912000) 0 nil])
([nil nil ((310 . 314) (305 . 311)) nil (26043 48277 267470 516000) 0 nil])
([nil nil ((314 . 315)) nil (26043 48277 267468 630000) 0 nil])
([nil nil ((316 . 317)) nil (26043 48277 267463 881000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -241) (undo-tree-id909 . -1) 242 (t 26043 48277 284346 807000)) nil (26043 48360 512866 705000) 0 nil])
([nil nil ((241 . 244)) nil (26043 48360 512864 819000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -242) (undo-tree-id908 . -1) (#(")" 0 1 (fontified t)) . 243)) nil (26043 48360 512863 422000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-variable-name-face fontified t)) . -241) (undo-tree-id907 . -1) 242) nil (26043 48360 512861 466000) 0 nil])
([nil nil ((243 . 244) (241 . 244)) nil (26043 48360 512860 70000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -241) (undo-tree-id905 . -1) (#("(" 0 1 (fontified t)) . -242) (undo-tree-id906 . -1) 243) nil (26043 48360 512858 114000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -242) (undo-tree-id904 . -1) 243) nil (26043 48360 512855 670000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -246) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (#("u" 0 1 (fontified t)) . -247) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#("f" 0 1 (fontified t)) . -248) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (#("i" 0 1 (fontified t)) . -249) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (#("b" 0 1 (fontified t)) . -250) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (#("(" 0 1 (fontified t)) . -251) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (#("s" 0 1 (fontified t)) . -252) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (#("(" 0 1 (fontified t)) . -253) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (#("o" 0 1 (fontified t)) . -254) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (#(")" 0 1 (fontified t)) . -255) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (#("," 0 1 (fontified t)) . -256) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (#("s" 0 1 (fontified t)) . -257) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (#("(" 0 1 (fontified t)) . -258) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (#("o" 0 1 (fontified t)) . -259) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (#(")" 0 1 (fontified t)) . -260) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (#(")" 0 1 (fontified t)) . -261) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (#("." 0 1 (fontified t)) . -262) (undo-tree-id902 . -1) (undo-tree-id903 . -1) 263) nil (26043 48360 512845 333000) 0 nil])
([nil nil ((246 . 247) (t 26043 48360 529918 720000)) nil (26043 48406 948099 835000) 0 nil])
([nil nil ((247 . 253)) nil (26043 48406 948098 438000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -241) (undo-tree-id910 . -1) 242) nil (26043 48406 948096 482000) 0 nil])
([nil nil ((243 . 244) (241 . 244)) nil (26043 48406 948087 752000) 0 nil])
([nil nil ((257 . 258) (255 . 258)) nil (26043 48406 948086 355000) 0 nil])
([nil nil ((259 . 260)) nil (26043 48406 948084 470000) 0 nil])
([nil nil ((262 . 263) (260 . 263)) nil (26043 48406 948083 73000) 0 nil])
([nil nil ((265 . 266)) nil (26043 48406 948077 765000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -287) (undo-tree-id937 . -1) (#("i" 0 1 (fontified t)) . -288) (undo-tree-id938 . -1) (#("b" 0 1 (fontified t)) . -289) (undo-tree-id939 . -1) (#("(" 0 1 (fontified t)) . -290) (undo-tree-id940 . -1) (#("s" 0 1 (fontified t)) . -291) (undo-tree-id941 . -1) (#("(" 0 1 (fontified t)) . -292) (undo-tree-id942 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -293) (undo-tree-id943 . -1) (#(")" 0 1 (fontified t)) . -294) (undo-tree-id944 . -1) (#("," 0 1 (fontified t)) . -295) (undo-tree-id945 . -1) (#("M" 0 1 (face font-lock-variable-name-face fontified t)) . -296) (undo-tree-id946 . -1) (#(")" 0 1 (fontified t)) . -297) (undo-tree-id947 . -1) (#("," 0 1 (fontified t)) . -298) (undo-tree-id948 . -1) (#("u" 0 1 (fontified t)) . -299) (undo-tree-id949 . -1) (#("f" 0 1 (fontified t)) . -300) (undo-tree-id950 . -1) (#("i" 0 1 (fontified t)) . -301) (undo-tree-id951 . -1) (#("b" 0 1 (fontified t)) . -302) (undo-tree-id952 . -1) (#("(" 0 1 (fontified t)) . -303) (undo-tree-id953 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -304) (undo-tree-id954 . -1) (#("," 0 1 (fontified t)) . -305) (undo-tree-id955 . -1) (#("N" 0 1 (face font-lock-variable-name-face fontified t)) . -306) (undo-tree-id956 . -1) (#(")" 0 1 (fontified t)) . -307) (undo-tree-id957 . -1) 308 (t 26043 48406 963684 825000)) nil (26043 48485 75972 22000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -286) (undo-tree-id936 . -1) 287) nil (26043 48485 75962 872000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -286) (undo-tree-id935 . -1) 287) nil (26043 48485 75961 406000) 0 nil])
([nil nil ((293 . 294) (291 . 294) (286 . 292)) nil (26043 48485 75959 450000) 0 nil])
([nil nil ((295 . 297)) nil (26043 48485 75958 53000) 0 nil])
([nil nil ((298 . 300)) nil (26043 48485 75956 587000) 0 nil])
([nil nil ((304 . 307) (300 . 305)) nil (26043 48485 75954 701000) 0 nil])
([nil nil ((308 . 309)) nil (26043 48485 75953 304000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -240) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (#("s" 0 1 (fontified t)) . -241) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (#("(" 0 1 (fontified t)) . -242) (undo-tree-id933 . -1) (undo-tree-id934 . -1) 243) nil (26043 48485 75951 418000) 0 nil])
([nil nil ((240 . 241)) nil (26043 48485 75945 691000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -242) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) 243) nil (26043 48485 75941 920000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -259) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (#(")" 0 1 (fontified t)) . -260) (undo-tree-id971 . -1) (undo-tree-id972 . -1) 261 (t 26043 48485 92298 174000)) nil (26043 48580 849911 133000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -258) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (#(")" 0 1 (fontified t)) . 259)) nil (26043 48580 849908 340000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -257) (undo-tree-id965 . -1) (undo-tree-id966 . -1) 258) nil (26043 48580 849905 965000) 0 nil])
([nil nil ((258 . 259) (#(")" 0 1 (fontified nil)) . -258) (257 . 259)) nil (26043 48580 849903 521000) 0 nil])
([nil nil ((260 . 261)) nil (26043 48580 849902 54000) 0 nil])
([nil nil ((261 . 267)) nil (26043 48580 849900 98000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -260) (undo-tree-id958 . -1) (#("u" 0 1 (fontified t)) . -261) (undo-tree-id959 . -1) (#("f" 0 1 (fontified t)) . -262) (undo-tree-id960 . -1) (#("i" 0 1 (fontified t)) . -263) (undo-tree-id961 . -1) (#("b" 0 1 (fontified t)) . -264) (undo-tree-id962 . -1) (#("(" 0 1 (fontified t)) . -265) (undo-tree-id963 . -1) (#(")" 0 1 (fontified t)) . -266) (undo-tree-id964 . -1) 267) nil (26043 48580 849895 768000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -257) (undo-tree-id976 . -1) (undo-tree-id977 . -1) 258 (t 26043 48580 866834 435000)) nil (26043 48657 10538 28000) 0 nil])
([nil nil ((259 . 260) (257 . 260)) nil (26043 48657 10535 583000) 0 nil])
([nil nil ((282 . 287)) nil (26043 48657 10534 117000) 0 nil])
([nil nil ((286 . 287)) nil (26043 48657 10532 231000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -288) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) 289) nil (26043 48657 10530 275000) 0 nil])
([nil nil ((288 . 289)) nil (26043 48657 10517 983000) 0 nil])
([nil nil ((324 . 325) (t 26043 48657 26472 511000)) nil (26043 50068 925275 204000) 0 nil])
([nil nil ((325 . 330)) nil (26043 50068 925273 318000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . -329) (undo-tree-id992 . -1) 330) nil (26043 50068 925271 852000) 0 nil])
([nil nil ((329 . 331)) nil (26043 50068 925269 966000) 0 nil])
([nil nil ((330 . 331)) nil (26043 50068 925268 499000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -330) (undo-tree-id991 . -1) 331) nil (26043 50068 925266 544000) 0 nil])
([nil nil ((330 . 331)) nil (26043 50068 925265 147000) 0 nil])
([nil nil ((332 . 333)) nil (26043 50068 925263 680000) 0 nil])
([nil nil ((333 . 334)) nil (26043 50068 925262 214000) 0 nil])
([nil nil ((339 . 342) (334 . 340)) nil (26043 50068 925260 747000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -340) (undo-tree-id990 . -1) (#(")" 0 1 (fontified t)) . 341)) nil (26043 50068 925258 862000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -339) (undo-tree-id989 . -1) 340) nil (26043 50068 925256 976000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -338) (undo-tree-id988 . -1) (#(")" 0 1 (fontified t)) . 339)) nil (26043 50068 925254 601000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -334) (undo-tree-id984 . -1) (#("v" 0 1 (fontified t)) . -335) (undo-tree-id985 . -1) (#("e" 0 1 (fontified t)) . -336) (undo-tree-id986 . -1) (#("n" 0 1 (fontified t)) . -337) (undo-tree-id987 . -1) 338) nil (26043 50068 925252 716000) 0 nil])
([nil nil ((340 . 341) (338 . 341) (334 . 339)) nil (26043 50068 925248 944000) 0 nil])
([nil nil ((343 . 344)) nil (26043 50068 925247 548000) 0 nil])
([nil nil ((344 . 345)) nil (26043 50068 925246 151000) 0 nil])
([nil nil ((345 . 351)) nil (26043 50068 925244 684000) 0 nil])
([nil nil ((350 . 351)) nil (26043 50068 925243 218000) 0 nil])
([nil nil ((352 . 356)) nil (26043 50068 925242 310000) 0 nil])
([nil nil ((356 . 358)) nil (26043 50068 925240 843000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -357) (undo-tree-id983 . -1) 358) nil (26043 50068 925239 376000) 0 nil])
([nil nil ((357 . 359)) nil (26043 50068 925237 491000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -355) (undo-tree-id979 . -1) (#("o" 0 1 (fontified t)) . -356) (undo-tree-id980 . -1) (#("d" 0 1 (fontified t)) . -357) (undo-tree-id981 . -1) (#("d" 0 1 (fontified t)) . -358) (undo-tree-id982 . -1) 359) nil (26043 50068 925235 605000) 0 nil])
([nil nil ((#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -350) (undo-tree-id978 . -1) 351) nil (26043 50068 925231 205000) 0 nil])
([nil nil ((352 . 353) (350 . 353)) nil (26043 50068 925221 707000) 0 nil])
([nil nil ((363 . 364) (358 . 364)) nil (26043 50068 925219 822000) 0 nil])
([nil nil ((365 . 366)) nil (26043 50068 925217 936000) 0 nil])
([nil nil ((366 . 367)) nil (26043 50068 925216 539000) 0 nil])
([nil nil ((371 . 374) (367 . 372)) nil (26043 50068 925215 142000) 0 nil])
([nil nil ((373 . 374)) nil (26043 50068 925213 257000) 0 nil])
([nil nil ((385 . 386) (376 . 386)) nil (26043 50068 925211 860000) 0 nil])
([nil nil ((387 . 388)) nil (26043 50068 925201 943000) 0 nil])
([nil nil ((388 . 389)) nil (26043 50068 925197 613000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -365) (undo-tree-id1020 . -1) 366 (t 26043 50068 943860 684000)) nil (26043 50184 1908 348000) 0 nil])
([nil nil ((365 . 366)) nil (26043 50184 1906 392000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -365) (undo-tree-id1019 . -1) 366) nil (26043 50184 1904 926000) 0 nil])
([nil nil ((365 . 366)) nil (26043 50184 1903 40000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -332) (undo-tree-id1018 . -1) 333) nil (26043 50184 1901 574000) 0 nil])
([nil nil ((332 . 335)) nil (26043 50184 1899 688000) 0 nil])
([nil nil ((335 . 337)) nil (26043 50184 1898 291000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -332) (undo-tree-id1013 . -1) (#("-" 0 1 (fontified t)) . -333) (undo-tree-id1014 . -1) (#(" " 0 1 (fontified t)) . -334) (undo-tree-id1015 . -1) (#("!" 0 1 (face font-lock-keyword-face fontified t)) . -335) (undo-tree-id1016 . -1) (#("." 0 1 (fontified t)) . -336) (undo-tree-id1017 . -1) 337) nil (26043 50184 1895 917000) 0 nil])
([nil nil ((332 . 333)) nil (26043 50184 1892 564000) 0 nil])
([nil nil ((359 . 361)) nil (26043 50184 1891 167000) 0 nil])
([nil nil ((#("!" 0 1 (face font-lock-keyword-face fontified t)) . -359) (undo-tree-id1011 . -1) (#("," 0 1 (fontified t)) . -360) (undo-tree-id1012 . -1) 361) nil (26043 50184 1889 771000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -365) (undo-tree-id1010 . -1) 366) nil (26043 50184 1887 396000) 0 nil])
([nil nil ((365 . 368)) nil (26043 50184 1885 510000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -389) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) 390) nil (26043 50184 1883 625000) 0 nil])
([nil nil ((389 . 392)) nil (26043 50184 1865 816000) 0 nil])
([nil nil ((392 . 394) (t 26043 50184 28041 997000)) nil (26043 50436 684913 191000) 0 nil])
([nil nil ((394 . 399)) nil (26043 50436 684911 235000) 0 nil])
([nil nil ((398 . 401)) nil (26043 50436 684909 839000) 0 nil])
([nil nil ((402 . 403)) nil (26043 50436 684908 442000) 0 nil])
([nil nil ((403 . 404)) nil (26043 50436 684906 626000) 0 nil])
([nil nil ((404 . 409)) nil (26043 50436 684904 670000) 0 nil])
([nil nil ((408 . 411)) nil (26043 50436 684903 204000) 0 nil])
([nil nil ((412 . 416)) nil (26043 50436 684901 807000) 0 nil])
([nil nil ((416 . 418)) nil (26043 50436 684900 340000) 0 nil])
([nil nil ((#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -416) (undo-tree-id1044 . -1) (#(" " 0 1 (fontified t)) . -417) (undo-tree-id1045 . -1) 418) nil (26043 50436 684898 874000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -395) (undo-tree-id1023 . -1) (#("q" 0 1 (fontified t)) . -396) (undo-tree-id1024 . -1) (#("(" 0 1 (fontified t)) . -397) (undo-tree-id1025 . -1) (#("o" 0 1 (fontified t)) . -398) (undo-tree-id1026 . -1) (#("," 0 1 (fontified t)) . -399) (undo-tree-id1027 . -1) (#("o" 0 1 (fontified t)) . -400) (undo-tree-id1028 . -1) (#(")" 0 1 (fontified t)) . -401) (undo-tree-id1029 . -1) (#("." 0 1 (fontified t)) . -402) (undo-tree-id1030 . -1) (#("
" 0 1 (fontified t)) . -403) (undo-tree-id1031 . -1) (#("l" 0 1 (fontified t)) . -404) (undo-tree-id1032 . -1) (#("e" 0 1 (fontified t)) . -405) (undo-tree-id1033 . -1) (#("q" 0 1 (fontified t)) . -406) (undo-tree-id1034 . -1) (#("(" 0 1 (fontified t)) . -407) (undo-tree-id1035 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -408) (undo-tree-id1036 . -1) (#("," 0 1 (fontified t)) . -409) (undo-tree-id1037 . -1) (#("Y" 0 1 (face font-lock-variable-name-face fontified t)) . -410) (undo-tree-id1038 . -1) (#(")" 0 1 (fontified t)) . -411) (undo-tree-id1039 . -1) (#(" " 0 1 (fontified t)) . -412) (undo-tree-id1040 . -1) (#(":" 0 1 (fontified t)) . -413) (undo-tree-id1041 . -1) (#("-" 0 1 (fontified t)) . -414) (undo-tree-id1042 . -1) (#(" " 0 1 (fontified t)) . -415) (undo-tree-id1043 . -1) 416) nil (26043 50436 684895 521000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -393) (undo-tree-id1021 . -1) (#("l" 0 1 (fontified t)) . -394) (undo-tree-id1022 . -1) 395) nil (26043 50436 684885 45000) 0 nil])
([nil nil ((393 . 394)) nil (26043 50436 684875 128000) 0 nil])
([nil nil ((399 . 402) (395 . 400)) nil (26043 50436 684873 731000) 0 nil])
([nil nil ((403 . 404)) nil (26043 50436 684871 357000) 0 nil])
([nil nil ((404 . 405)) nil (26043 50436 684869 960000) 0 nil])
([nil nil ((405 . 410)) nil (26043 50436 684868 563000) 0 nil])
([nil nil ((413 . 414) (409 . 414)) nil (26043 50436 684866 677000) 0 nil])
([nil nil ((416 . 417)) nil (26043 50436 684865 211000) 0 nil])
([nil nil ((417 . 418)) nil (26043 50436 684863 325000) 0 nil])
([nil nil ((418 . 423)) nil (26043 50436 684861 439000) 0 nil])
([nil nil ((426 . 427) (422 . 427)) nil (26043 50436 684859 484000) 0 nil])
([nil nil ((429 . 433)) nil (26043 50436 684858 17000) 0 nil])
([nil nil ((437 . 440) (433 . 438)) nil (26043 50436 684856 551000) 0 nil])
([nil nil ((441 . 442)) nil (26043 50436 684854 595000) 0 nil])
([nil nil ((442 . 443)) nil (26043 50436 684849 846000) 0 nil])
([nil nil ((#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -422) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) 423 (t 26043 50436 701754 947000)) nil (26043 50487 845656 158000) 0 nil])
([nil nil ((424 . 425) (422 . 425)) nil (26043 50487 845639 466000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -425) (undo-tree-id1120 . -1) (#("," 0 1 (fontified t)) . -426) (undo-tree-id1121 . -1) (#("s" 0 1 (fontified t)) . -427) (undo-tree-id1122 . -1) (#("(" 0 1 (fontified t)) . -428) (undo-tree-id1123 . -1) (#("Y" 0 1 (face font-lock-variable-name-face fontified t)) . -429) (undo-tree-id1124 . -1) (#(")" 0 1 (fontified t)) . -430) (undo-tree-id1125 . -1) (#(")" 0 1 (fontified t)) . -431) (undo-tree-id1126 . -1) (#(" " 0 1 (fontified t)) . -432) (undo-tree-id1127 . -1) (#(":" 0 1 (fontified t)) . -433) (undo-tree-id1128 . -1) (#("-" 0 1 (fontified t)) . -434) (undo-tree-id1129 . -1) (#(" " 0 1 (fontified t)) . -435) (undo-tree-id1130 . -1) (#("l" 0 1 (fontified t)) . -436) (undo-tree-id1131 . -1) (#("e" 0 1 (fontified t)) . -437) (undo-tree-id1132 . -1) (#("q" 0 1 (fontified t)) . -438) (undo-tree-id1133 . -1) (#("(" 0 1 (fontified t)) . -439) (undo-tree-id1134 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -440) (undo-tree-id1135 . -1) (#("," 0 1 (fontified t)) . -441) (undo-tree-id1136 . -1) (#("Y" 0 1 (face font-lock-variable-name-face fontified t)) . -442) (undo-tree-id1137 . -1) (#(")" 0 1 (fontified t)) . -443) (undo-tree-id1138 . -1) (#("." 0 1 (fontified t)) . -444) (undo-tree-id1139 . -1) (#("
" 0 1 (fontified t)) . -445) (undo-tree-id1140 . -1) 446 (t 26043 50487 867368 46000)) nil (26043 50798 138010 684000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -404) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (#("l" 0 1 (fontified t)) . -405) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (#("e" 0 1 (fontified t)) . -406) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (#("q" 0 1 (fontified t)) . -407) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (#("(" 0 1 (fontified t)) . -408) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (#("o" 0 1 (fontified t)) . -409) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (#("," 0 1 (fontified t)) . -410) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (#("s" 0 1 (fontified t)) . -411) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (#("(" 0 1 (fontified t)) . -412) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (#("o" 0 1 (fontified t)) . -413) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (#(")" 0 1 (fontified t)) . -414) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (#(")" 0 1 (fontified t)) . -415) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (#("." 0 1 (fontified t)) . -416) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (#("
" 0 1 (fontified t)) . -417) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (#("l" 0 1 (fontified t)) . -418) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (#("e" 0 1 (fontified t)) . -419) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (#("q" 0 1 (fontified t)) . -420) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (#("(" 0 1 (fontified t)) . -421) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (#("s" 0 1 (fontified t)) . -422) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#("(" 0 1 (fontified t)) . -423) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -424) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) 425) nil (26043 50798 137998 951000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -395) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (#("e" 0 1 (fontified t)) . -396) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (#("q" 0 1 (fontified t)) . -397) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("(" 0 1 (fontified t)) . -398) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (#("o" 0 1 (fontified t)) . -399) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (#("," 0 1 (fontified t)) . -400) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("o" 0 1 (fontified t)) . -401) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (#(")" 0 1 (fontified t)) . -402) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (#("." 0 1 (fontified t)) . -403) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) 404) nil (26043 50798 137979 465000) 0 nil])
([nil nil ((395 . 400)) nil (26043 50798 137971 503000) 0 nil])
([nil nil ((399 . 402)) nil (26043 50798 137970 106000) 0 nil])
([nil nil ((403 . 404)) nil (26043 50798 137968 221000) 0 nil])
([nil nil ((404 . 405)) nil (26043 50798 137967 243000) 0 nil])
([nil nil ((405 . 410)) nil (26043 50798 137965 357000) 0 nil])
([nil nil ((409 . 412)) nil (26043 50798 137964 379000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -410) (undo-tree-id1059 . -1) (#(")" 0 1 (fontified t)) . 411)) nil (26043 50798 137962 983000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-variable-name-face fontified t)) . -409) (undo-tree-id1058 . -1) 410) nil (26043 50798 137960 538000) 0 nil])
([nil nil ((409 . 412)) nil (26043 50798 137958 94000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -410) (undo-tree-id1057 . -1) (#(")" 0 1 (fontified t)) . 411)) nil (26043 50798 137956 627000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-variable-name-face fontified t)) . -409) (undo-tree-id1056 . -1) 410) nil (26043 50798 137953 764000) 0 nil])
([nil nil ((411 . 412) (409 . 412)) nil (26043 50798 137945 173000) 0 nil])
([nil nil ((413 . 415)) nil (26043 50798 137942 799000) 0 nil])
([nil nil ((416 . 417) (415 . 417)) nil (26043 50798 137940 913000) 0 nil])
([nil nil ((427 . 430) (419 . 428)) nil (26043 50798 137939 27000) 0 nil])
([nil nil ((431 . 432)) nil (26043 50798 137937 211000) 0 nil])
([nil nil ((432 . 433) 404) nil (26043 50798 137931 484000) 0 nil])
([nil nil ((404 . 405) (t 26043 50798 154369 843000)) nil (26043 50834 496407 418000) 0 nil])
([nil nil ((409 . 414) (405 . 410)) nil (26043 50834 496405 533000) 0 nil])
([nil nil ((413 . 414)) nil (26043 50834 496403 647000) 0 nil])
([nil nil ((416 . 417)) nil (26043 50834 496398 409000) 0 nil])
([nil nil ((446 . 448) (t 26043 50834 513672 283000)) nil (26043 53398 972159 588000) 0 nil])
([nil nil ((448 . 455)) nil (26043 53398 972157 702000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -453) (undo-tree-id1228 . -1) (#("t" 0 1 (fontified t)) . -454) (undo-tree-id1229 . -1) 455) nil (26043 53398 972156 305000) 0 nil])
([nil nil ((457 . 460) (453 . 458)) nil (26043 53398 972153 861000) 0 nil])
([nil nil ((461 . 473)) nil (26043 53398 972152 394000) 0 nil])
([nil nil ((472 . 475)) nil (26043 53398 972150 928000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -461) (undo-tree-id1213 . -1) (#(":" 0 1 (fontified t)) . -462) (undo-tree-id1214 . -1) (#("-" 0 1 (fontified t)) . -463) (undo-tree-id1215 . -1) (#(" " 0 1 (fontified t)) . -464) (undo-tree-id1216 . -1) (#("p" 0 1 (fontified t)) . -465) (undo-tree-id1217 . -1) (#("a" 0 1 (fontified t)) . -466) (undo-tree-id1218 . -1) (#("r" 0 1 (fontified t)) . -467) (undo-tree-id1219 . -1) (#("e" 0 1 (fontified t)) . -468) (undo-tree-id1220 . -1) (#("n" 0 1 (fontified t)) . -469) (undo-tree-id1221 . -1) (#("t" 0 1 (fontified t)) . -470) (undo-tree-id1222 . -1) (#("(" 0 1 (fontified t)) . -471) (undo-tree-id1223 . -1) (#("Y" 0 1 (face font-lock-variable-name-face fontified t)) . -472) (undo-tree-id1224 . -1) (#("," 0 1 (fontified t)) . -473) (undo-tree-id1225 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -474) (undo-tree-id1226 . -1) (#(")" 0 1 (fontified t)) . -475) (undo-tree-id1227 . -1) 476) nil (26043 53398 972149 42000) 0 nil])
([nil nil ((461 . 463)) nil (26043 53398 972141 359000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -461) (undo-tree-id1211 . -1) (#(" " 0 1 (fontified t)) . -462) (undo-tree-id1212 . -1) 463) nil (26043 53398 972139 962000) 0 nil])
([nil nil ((461 . 465)) nil (26043 53398 972138 77000) 0 nil])
([nil nil ((472 . 475) (465 . 473)) nil (26043 53398 972136 680000) 0 nil])
([nil nil ((476 . 481)) nil (26043 53398 972135 283000) 0 nil])
([nil nil ((481 . 486)) nil (26043 53398 972133 397000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -479) (undo-tree-id1210 . -1) 480) nil (26043 53398 972132 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -477) (undo-tree-id1202 . -1) (#("n" 0 1 (fontified t)) . -478) (undo-tree-id1203 . -1) (#("c" 0 1 (fontified t)) . -479) (undo-tree-id1204 . -1) (#("e" 0 1 (fontified t)) . -480) (undo-tree-id1205 . -1) (#("s" 0 1 (fontified t)) . -481) (undo-tree-id1206 . -1) (#("t" 0 1 (fontified t)) . -482) (undo-tree-id1207 . -1) (#("o" 0 1 (fontified t)) . -483) (undo-tree-id1208 . -1) (#("r" 0 1 (fontified t)) . -484) (undo-tree-id1209 . -1) 485) nil (26043 53398 972129 556000) 0 nil])
([nil nil ((477 . 485)) nil (26043 53398 972124 737000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -464) (undo-tree-id1181 . -1) (#("f" 0 1 (fontified t)) . -465) (undo-tree-id1182 . -1) (#("a" 0 1 (fontified t)) . -466) (undo-tree-id1183 . -1) (#("t" 0 1 (fontified t)) . -467) (undo-tree-id1184 . -1) (#("h" 0 1 (fontified t)) . -468) (undo-tree-id1185 . -1) (#("e" 0 1 (fontified t)) . -469) (undo-tree-id1186 . -1) (#("r" 0 1 (fontified t)) . -470) (undo-tree-id1187 . -1) (#("(" 0 1 (fontified t)) . -471) (undo-tree-id1188 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -472) (undo-tree-id1189 . -1) (#("," 0 1 (fontified t)) . -473) (undo-tree-id1190 . -1) (#("N" 0 1 (face font-lock-variable-name-face fontified t)) . -474) (undo-tree-id1191 . -1) (#(")" 0 1 (fontified t)) . -475) (undo-tree-id1192 . -1) (#("," 0 1 (fontified t)) . -476) (undo-tree-id1193 . -1) (#("m" 0 1 (fontified t)) . -477) (undo-tree-id1194 . -1) (#("o" 0 1 (fontified t)) . -478) (undo-tree-id1195 . -1) (#("t" 0 1 (fontified t)) . -479) (undo-tree-id1196 . -1) (#("h" 0 1 (fontified t)) . -480) (undo-tree-id1197 . -1) (#("e" 0 1 (fontified t)) . -481) (undo-tree-id1198 . -1) (#("r" 0 1 (fontified t)) . -482) (undo-tree-id1199 . -1) (#("(" 0 1 (fontified t)) . -483) (undo-tree-id1200 . -1) (#(")" 0 1 (fontified t)) . -484) (undo-tree-id1201 . -1) 485) nil (26043 53398 972122 362000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -448) (undo-tree-id1165 . -1) (#("n" 0 1 (fontified t)) . -449) (undo-tree-id1166 . -1) (#("c" 0 1 (fontified t)) . -450) (undo-tree-id1167 . -1) (#("e" 0 1 (fontified t)) . -451) (undo-tree-id1168 . -1) (#("s" 0 1 (fontified t)) . -452) (undo-tree-id1169 . -1) (#("t" 0 1 (fontified t)) . -453) (undo-tree-id1170 . -1) (#("o" 0 1 (fontified t)) . -454) (undo-tree-id1171 . -1) (#("r" 0 1 (fontified t)) . -455) (undo-tree-id1172 . -1) (#("(" 0 1 (fontified t)) . -456) (undo-tree-id1173 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -457) (undo-tree-id1174 . -1) (#("," 0 1 (fontified t)) . -458) (undo-tree-id1175 . -1) (#("Y" 0 1 (face font-lock-variable-name-face fontified t)) . -459) (undo-tree-id1176 . -1) (#(")" 0 1 (fontified t)) . -460) (undo-tree-id1177 . -1) (#(" " 0 1 (fontified t)) . -461) (undo-tree-id1178 . -1) (#(":" 0 1 (fontified t)) . -462) (undo-tree-id1179 . -1) (#("-" 0 1 (fontified t)) . -463) (undo-tree-id1180 . -1) 464) nil (26043 53398 972111 327000) 0 nil])
([nil nil ((458 . 461) (448 . 459)) nil (26043 53398 972103 784000) 0 nil])
([nil nil ((462 . 465)) nil (26043 53398 972102 388000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -464) (undo-tree-id1164 . -1) 465) nil (26043 53398 972100 991000) 0 nil])
([nil nil ((464 . 484)) nil (26043 53398 972099 105000) 0 nil])
([nil nil ((484 . 487)) nil (26043 53398 972097 708000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-comment-face fontified t)) . -486) (undo-tree-id1163 . -1) 487) nil (26043 53398 972096 311000) 0 nil])
([nil nil ((486 . 490)) nil (26043 53398 972094 426000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-comment-face fontified t)) . -488) (undo-tree-id1161 . -1) (#("." 0 1 (face font-lock-comment-face fontified t)) . -489) (undo-tree-id1162 . -1) 490) nil (26043 53398 972093 29000) 0 nil])
([nil nil ((488 . 490)) nil (26043 53398 972091 143000) 0 nil])
([nil nil ((490 . 491)) nil (26043 53398 972089 676000) 0 nil])
([nil nil ((501 . 504) (491 . 502)) nil (26043 53398 972087 791000) 0 nil])
([nil nil ((505 . 517)) nil (26043 53398 972085 835000) 0 nil])
([nil nil ((516 . 519)) nil (26043 53398 972084 369000) 0 nil])
([nil nil ((520 . 521)) nil (26043 53398 972082 972000) 0 nil])
([nil nil ((521 . 522)) nil (26043 53398 972081 505000) 0 nil])
([nil nil ((522 . 528)) nil (26043 53398 972079 619000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -527) (undo-tree-id1160 . -1) 528) nil (26043 53398 972078 222000) 0 nil])
([nil nil ((532 . 535) (527 . 533)) nil (26043 53398 972076 337000) 0 nil])
([nil nil ((536 . 540)) nil (26043 53398 972074 451000) 0 nil])
([nil nil ((550 . 553) (540 . 551)) nil (26043 53398 972073 54000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -540) (undo-tree-id1146 . -1) (#("n" 0 1 (fontified t)) . -541) (undo-tree-id1147 . -1) (#("s" 0 1 (fontified t)) . -542) (undo-tree-id1148 . -1) (#("c" 0 1 (fontified t)) . -543) (undo-tree-id1149 . -1) (#("e" 0 1 (fontified t)) . -544) (undo-tree-id1150 . -1) (#("s" 0 1 (fontified t)) . -545) (undo-tree-id1151 . -1) (#("t" 0 1 (fontified t)) . -546) (undo-tree-id1152 . -1) (#("o" 0 1 (fontified t)) . -547) (undo-tree-id1153 . -1) (#("r" 0 1 (fontified t)) . -548) (undo-tree-id1154 . -1) (#("(" 0 1 (fontified t)) . -549) (undo-tree-id1155 . -1) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -550) (undo-tree-id1156 . -1) (#("," 0 1 (fontified t)) . -551) (undo-tree-id1157 . -1) (#("Z" 0 1 (face font-lock-variable-name-face fontified t)) . -552) (undo-tree-id1158 . -1) (#(")" 0 1 (fontified t)) . -553) (undo-tree-id1159 . -1) 554) nil (26043 53398 972070 680000) 0 nil])
([nil nil ((547 . 550) (540 . 548)) nil (26043 53398 972063 626000) 0 nil])
([nil nil ((562 . 565) (551 . 563)) nil (26043 53398 972062 229000) 0 nil])
([nil nil ((566 . 567)) nil (26043 53398 972060 832000) 0 nil])
([nil nil ((454 . 459) (447 . 455)) nil (26043 53398 972059 365000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -454) (undo-tree-id1141 . -1) (#("e" 0 1 (fontified t)) . -455) (undo-tree-id1142 . -1) (#("v" 0 1 (fontified t)) . -456) (undo-tree-id1143 . -1) (#("i" 0 1 (fontified t)) . -457) (undo-tree-id1144 . -1) (#("," 0 1 (fontified t)) . -458) (undo-tree-id1145 . -1) 459) nil (26043 53398 972056 991000) 0 nil])
([nil nil ((454 . 466)) nil (26043 53398 972046 375000) 0 nil])
([nil nil ((467 . 468)) nil (26043 53398 972044 978000) 0 nil])
([nil nil ((468 . 469)) nil (26043 53398 972043 511000) 0 nil])
([nil nil ((469 . 477)) nil (26043 53398 972042 44000) 0 nil])
([nil nil ((476 . 487)) nil (26043 53398 972040 578000) 0 nil])
([nil nil ((488 . 489)) nil (26043 53398 972039 181000) 0 nil])
([nil nil ((609 . 610) 489) nil (26043 53398 972034 502000) 0 nil])
([nil nil ((610 . 611) (t 26043 53398 989732 436000)) nil (26049 4009 442660 592000) 0 nil])
([nil nil ((610 . 611) (t 26049 4009 459240 599000)) nil (26050 5357 651264 364000) 0 nil])
([nil nil ((609 . 610) (t 26050 5357 670485 219000)) nil (26053 6398 865227 54000) 0 nil])
([nil nil ((610 . 611)) nil (26053 6398 865225 168000) 0 nil])
([nil nil ((#("t" 0 1 (help-echo "Unreferenced predicate mtoher/2 head term" font-lock-face (sweeprolog-head-unreferenced sweeprolog-clause) fontified t)) . -448) (undo-tree-id824 . -1) (undo-tree-id825 . -1) 449) nil (26053 6398 865223 282000) 0 nil])
([nil nil ((449 . 449) (449 . 450)) nil (26053 6398 865220 907000) 0 nil])
([nil nil ((#("X" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t cursor-sensor-functions (#[771 "\211\301=\203 \302`\300\"\207\302!\207" ["X" entered sweeprolog-highlight-variable] 6 "

(fn WIN OLD DIR)"]))) . -589) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (#("," 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -590) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (#("Z" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t cursor-sensor-functions (#[771 "\211\301=\203 \302`\300\"\207\302!\207" ["Z" entered sweeprolog-highlight-variable] 6 "

(fn WIN OLD DIR)"]))) . -591) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (#(")" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -592) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#("," 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -593) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (#("a" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -594) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#("n" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -595) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (#("s" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -596) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (#("c" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -597) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -598) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (#("s" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -599) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (#("t" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -600) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (#("o" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -601) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (#("r" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -602) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (#("(" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -603) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (#("Z" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t cursor-sensor-functions (#[771 "\211\301=\203 \302`\300\"\207\302!\207" ["Z" entered sweeprolog-highlight-variable] 6 "

(fn WIN OLD DIR)"]))) . -604) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (#("," 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -605) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (#("Y" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t cursor-sensor-functions (#[771 "\211\301=\203 \302`\300\"\207\302!\207" ["Y" entered sweeprolog-highlight-variable] 6 "

(fn WIN OLD DIR)"]))) . -606) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (#(")" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -607) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (#("." 0 1 (font-lock-face (sweeprolog-fullstop) help-echo "Fullstop" fontified t rear-nonsticky (sweeprolog-fullstop) sweeprolog-fullstop t)) . -608) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (#("
" 0 1 (fontified t)) . -609) (undo-tree-id822 . -1) (undo-tree-id823 . -1) 610) nil (26053 6398 865218 44000) 0 nil])
([nil nil ((#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -568) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (#("s" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -569) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (#("t" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -570) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (#("o" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -571) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("r" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -572) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (#("(" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -573) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (#("X" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t cursor-sensor-functions (#[771 "\211\301=\203 \302`\300\"\207\302!\207" ["X" entered sweeprolog-highlight-variable] 6 "

(fn WIN OLD DIR)"]))) . -574) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (#("," 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -575) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (#("Y" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t cursor-sensor-functions (#[771 "\211\301=\203 \302`\300\"\207\302!\207" ["Y" entered sweeprolog-highlight-variable] 6 "

(fn WIN OLD DIR)"]))) . -576) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (#(")" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -577) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (#(" " 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -578) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (#(":" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -579) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (#("-" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -580) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (#(" " 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -581) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (#("m" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -582) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (#("o" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -583) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (#("t" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -584) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (#("h" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -585) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -586) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#("r" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -587) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (#("(" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -588) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) 589) nil (26053 6398 865197 858000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -547) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (#(":" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -548) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (#("-" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -549) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#(" " 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -550) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (#("m" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -551) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (#("o" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -552) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("t" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -553) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (#("h" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -554) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -555) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (#("r" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -556) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("(" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -557) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("X" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t cursor-sensor-functions (#[771 "\211\301=\203 \302`\300\"\207\302!\207" ["X" entered sweeprolog-highlight-variable] 6 "

(fn WIN OLD DIR)"]))) . -558) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("," 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -559) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#("Y" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t cursor-sensor-functions (#[771 "\211\301=\203 \302`\300\"\207\302!\207" ["Y" entered sweeprolog-highlight-variable] 6 "

(fn WIN OLD DIR)"]))) . -560) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#(")" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -561) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (#("." 0 1 (font-lock-face (sweeprolog-fullstop) help-echo "Fullstop" fontified t rear-nonsticky (sweeprolog-fullstop) sweeprolog-fullstop t)) . -562) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("
" 0 1 (fontified t)) . -563) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (#("a" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -564) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (#("n" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -565) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (#("s" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -566) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (#("c" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -567) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) 568) nil (26053 6398 865167 334000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -526) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (#("o" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -527) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (#("f" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -528) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#(" " 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -529) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (#("Y" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -530) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (#("." 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -531) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (#("
" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -532) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (#("a" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -533) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (#("n" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -534) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("s" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -535) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (#("c" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -536) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -537) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("s" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -538) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (#("t" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -539) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (#("o" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -540) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#("r" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -541) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (#("(" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -542) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (#("X" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t cursor-sensor-functions (#[771 "\211\301=\203 \302`\300\"\207\302!\207" ["X" entered sweeprolog-highlight-variable] 6 "

(fn WIN OLD DIR)"]))) . -543) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (#("," 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -544) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (#("Y" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t cursor-sensor-functions (#[771 "\211\301=\203 \302`\300\"\207\302!\207" ["Y" entered sweeprolog-highlight-variable] 6 "

(fn WIN OLD DIR)"]))) . -545) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (#(")" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -546) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) 547) nil (26053 6398 865146 380000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -505) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (#("%" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -506) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#("h" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -507) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -508) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (#("r" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -509) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -510) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (#(" " 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -511) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (#("X" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -512) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (#(" " 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -513) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("i" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -514) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (#("s" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -515) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (#(" " 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -516) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (#("a" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -517) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (#("n" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -518) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (#("s" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -519) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (#("c" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -520) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -521) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (#("s" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -522) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (#("t" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -523) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (#("o" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -524) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (#("r" 0 1 (font-lock-face (sweeprolog-comment) help-echo "Comment" fontified t)) . -525) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) 526) nil (26053 6398 865125 985000) 0 nil])
([nil nil ((#("a" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -484) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#("m" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -485) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (#("a" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -486) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (#(")" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -487) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#("." 0 1 (font-lock-face (sweeprolog-fullstop) help-echo "Fullstop" fontified t rear-nonsticky (sweeprolog-fullstop) sweeprolog-fullstop t)) . -488) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (#("
" 0 1 (fontified t)) . -489) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (#("a" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -490) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#("n" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -491) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (#("s" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -492) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#("c" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -493) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -494) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("s" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -495) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (#("t" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -496) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("o" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -497) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("r" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -498) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("(" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -499) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (#("X" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -500) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (#("," 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -501) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (#("Y" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -502) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#(")" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -503) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("." 0 1 (font-lock-face (sweeprolog-fullstop) help-echo "Fullstop" fontified t rear-nonsticky (sweeprolog-fullstop) sweeprolog-fullstop t)) . -504) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) 505) nil (26053 6398 865104 961000) 0 nil])
([nil nil ((#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -463) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("v" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -464) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (#("i" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -465) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (#(")" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -466) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (#("." 0 1 (font-lock-face (sweeprolog-fullstop) help-echo "Fullstop" fontified t rear-nonsticky (sweeprolog-fullstop) sweeprolog-fullstop t)) . -467) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#("
" 0 1 (fontified t)) . -468) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (#("m" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -469) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (#("o" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -470) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (#("t" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -471) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (#("h" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -472) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -473) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (#("r" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -474) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("(" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -475) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (#("d" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -476) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -477) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (#("v" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -478) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("i" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -479) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (#("," 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -480) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("a" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -481) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (#("m" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -482) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("m" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -483) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) 484) nil (26053 6398 865077 231000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -445) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("
" 0 1 (fontified t)) . -446) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("m" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -447) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("o" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -448) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("t" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -449) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (#("h" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -450) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -451) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#("r" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -452) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("(" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -453) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("p" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -454) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (#("r" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -455) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (#("a" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -456) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#("v" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -457) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -458) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -459) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#("n" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -460) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (#("," 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -461) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (#("d" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -462) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) 463) nil (26053 6398 865049 991000) 0 nil])
([nil nil ((447 . 448) (t 26053 6398 883158 180000)) nil (26054 5295 462623 604000) 0 nil])
([nil nil ((#("h" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -447) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 448) nil (26054 5295 462621 718000) 0 nil])
([nil nil ((447 . 447) (447 . 450)) nil (26054 5295 462619 344000) 0 nil])
([nil nil ((#("i" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -448) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("p" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -449) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 450) nil (26054 5295 462616 969000) 0 nil])
([nil nil ((#("z" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -447) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 448) nil (26054 5295 462613 197000) 0 nil])
([nil nil ((450 . 451) (447 . 447) (447 . 450)) nil (26054 5295 462610 404000) 0 nil])
([nil nil ((#("a" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -447) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("p" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -448) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("p" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -449) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -450) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 451) nil (26054 5295 462608 518000) 0 nil])
([nil nil ((447 . 449)) nil (26054 5295 462603 349000) 0 nil])
([nil nil ((449 . 449) (449 . 450)) nil (26054 5295 462601 463000) 0 nil])
([nil nil ((#("c" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -447) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("l" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -448) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("s" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -449) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 450) nil (26054 5295 462599 508000) 0 nil])
([nil nil ((450 . 453) (447 . 447) (447 . 450)) nil (26054 5295 462595 177000) 0 nil])
([nil nil ((#("n" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -450) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("e" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -451) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("d" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -452) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 453) nil (26054 5295 462593 222000) 0 nil])
([nil nil ((451 . 454) (450 . 450) (450 . 451)) nil (26054 5295 462589 380000) 0 nil])
([nil nil ((#("d" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified t)) . -453) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 454) nil (26054 5295 462587 494000) 0 nil])
([nil nil ((454 . 458) (453 . 453) (453 . 454)) nil (26054 5295 462574 713000) 0 nil])
([nil nil ((457 . 468)) nil (26054 5295 462572 827000) 0 nil])
([nil nil ((469 . 470)) nil (26054 5295 462568 77000) 0 nil])
([nil current ((99 . 130) (#("
" 0 1 (font-lock-face (sweeprolog-around-syntax-error) fontified nil)) . 99) (1 . 100) (t 26054 5295 485594 448000)) nil (26055 27455 995773 189000) 0 nil])
nil
